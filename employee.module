<?php
/**
 * @file
 * module for displaying employees
 * form and admin list of employees.
 *
 */

/**
 * Implement hook help
 * display help for employee module.
 */

function employee_help($path, $arg) {

	switch ($path) {

		case "admin/help#employee":
			return "<p>" . t('employees list') . "</p>";
			break;

	}

}

/**
* Implements hook_block_info().
*/

function employee_block_info() {

	$blocks['employee'] = array(
							// The name that will appear in the block list.
							'info' => t('Employees'),
							// Default setting.
							'cache' => DRUPAL_CACHE_PER_ROLE,
							);
	return $blocks;
}

/**
 * Creating the list to display
 */

function employee_list() {

	$order_by = variable_get('employee_order_by', 'name');
	$direction = variable_get('employee_sort', 'desc');
	$query = db_select('employees', 'emp')
	->fields('emp', array('id', 'name', 'phone', 'email'))
	->orderBy($order_by, $direction)
	->execute();
	return $query;
}

/**
 * The function for showing the form.
 */

function employee_details_form() {

	$form = drupal_get_form('employee_user_details_form');
	return $form;

}

/**
 * creating the configuration form.
 */

function employee_menu() {

	$items = array();
	$items['admin/config/content/employee'] = array(
			'title' => 'Employees',
			'description' => 'Configuration for Employee module',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('employee_config_form'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);
/*	$items['employee/employee_list'] = array(
			'title' => 'Employee list',
			'description' => 'The list of employees',
			'page callback' => 'node_page_view',
			'page arguments' => array('employee_list'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);
*/	return $items;

}

/**
 * creating the configuration form.
 */

function employee_config_form($form, &$form_state) {

	$form['employee_sort'] = array(
		'#type' => 'select',
		'#title' => t('sort ascending or descending'),
		'#default_value' => variable_get('employee_sort', 'desc'),
		'#description' => t('The sorting order of the names.'),
		'#options' => drupal_map_assoc(array('asc', 'desc')),
		'#required' => TRUE,
	);
	$form['employee_order_by'] = array(
		'#type' => 'select',
		'#title' => t('sort by name, email or phone'),
		'#default_value' => variable_get('employee_order_by', 'name'),
		'#description' => t('Sorting by names, email or phone.'),
		'#options' => drupal_map_assoc(array('name', 'email', 'phone')),
		'#required' => TRUE,
	);
	return system_settings_form($form);

}
/**
 * creating the content to view
 */

function employee_block_view($delta = '') {

	switch ($delta) {

		case 'employee':

			$block['subject'] = t('Employee');
			if (user_access('administrator') and drupal_is_front_page()) {
				$result = employee_list('name', 'DESC');
				$items = array();
				foreach ($result as $row) {
					$items[] = array(
								'data' => $row->name,
							);
				}
				if (empty($items)) {
					$block['content'] = t('No employees available.');
				} else {
					$per_page = 10;
					$current_page = pager_default_initialize(count($items), $per_page);
					$chunks = array_chunk($items,$per_page, TRUE);
					$block['content'] = theme('item_list', array('items' => $chunks[$current_page]));
					$block['content'] .= theme('pager', array('quantity',count($items)));
				}
			} else if (user_access('post comments') and drupal_is_front_page()) {
				$result = employee_details_form();
				$block['content'] = array('items' => $result);
			}
			
		return $block;
	}
}

/**
 * form for the employee to give his/her details.
 */

function employee_user_details_form($form, &$form_state) {
	$form['name'] = array(
					'#type' => 'textfield',
					'#title' => t('enter your name here'),
					'#default_value' => variable_get('name', ''),
					'#maxlength' => 200,
					'#description' => t('Your name.'),
					'#required' => TRUE,
				);

	$form['email'] = array(
					'#type' => 'textfield',
					'#title' => t('enter your email'),
					'#default_value' => variable_get('email', ''),
					'#maxlength' => 200,
					'#description' => t('Your email.'),
					'#required' => TRUE,
				);

	$form['phone'] = array(
					'#type' => 'textfield',
					'#title' => t('enter your phone'),
					'#default_value' => variable_get('phone', ''),
					'#maxlength' => 30,
					'#description' => t('Your phone.'),
					'#required' => TRUE,
				);

	$form['submit'] = array(
					'#type' => 'submit',
					'#value' => t('submit'),
				);

	return $form;
}

/**
 * validating the form.
 */

function employee_user_details_form_validate($form, &$form_state) {

	$name_form = $form_state['values']['name'];
	if (empty($name_form)) {
		form_set_error('name', t('you must write your name.'));
	}

	$email_form = $form_state['values']['email'];
	if (empty($email_form)) {
		form_set_error('email', t('you must write your mail.'));
	} else if (! filter_var($email_form, FILTER_VALIDATE_EMAIL)) {
		form_set_error('email', t('you must write a valid mail'));
	}

	$phone_form = $form_state['values']['phone'];
	if (empty($phone_form)) {
		form_set_error('phone', t('you must write your phone number'));
	}

}

/**
 * submiting the form.
 */

function employee_user_details_form_submit($form, &$form_state) {

	$fields = array(
				'name' => $form_state['values']['name'],
				'email' => $form_state['values']['email'],
				'phone' => $form_state['values']['phone'],
				'user_id' => user_uid_optional_to_arg('%'));
	db_insert('employees')->fields($fields)->execute();

}
